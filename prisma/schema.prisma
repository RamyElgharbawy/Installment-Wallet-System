generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  admin
  moderator
}

enum Type {
  purchaseItem
  loan
}

enum Period {
  daily
  weekly
  monthly
  annually
}

enum Status {
  remaining
  completed
}

model User {
  id                String     @id @default(uuid())
  name              String?
  email             String     @unique
  password          String     @db.VarChar(255)
  passwordChangedAt Int?
  role              Role       @default(user)
  salary            Float      @default(1000)
  netSalary         Float?
  items             Item[]
  fellows           Fellow[]
  spending          Spending[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Item {
  id             String   @id @default(uuid())
  type           Type     @default(purchaseItem)
  title          String
  price          Float
  purchaseDate   DateTime
  numberOfMonths Int
  monthlyAmount  Float?
  startIn        DateTime
  endIn          DateTime
  shares         Share[]
  status         Status?  @default(remaining)
  notes          String?
  owner          User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Fellow {
  id             String   @id @default(uuid())
  manager        String?
  amount         Int
  startIn        DateTime
  endIn          DateTime
  numberOfMonths Int
  turnMonth      Int
  shares         Share[]
  owner          User     @relation(fields: [userId], references: [id])
  userId         String
  status         Status?  @default(remaining)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Spending {
  id        String    @id @default(uuid())
  name      String
  amount    Float
  schedule  Period    @default(monthly)
  startIn   DateTime?
  status    Status?   @default(remaining)
  owner     User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String   @unique
  email     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)

  @@index([email])
}

model InstallmentFees {
  id                   String   @id @default(uuid())
  bankName             String
  period               Int
  purchasingPercentage Float
  cashPercentage       Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Share {
  id        String    @id @default(uuid())
  amount    Float
  dueDate   DateTime
  payDate   DateTime? @default(now())
  payStatus Boolean   @default(false)
  Fellow    Fellow?   @relation(fields: [fellowId], references: [id], onDelete: Cascade)
  fellowId  String?
  Item      Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([itemId, fellowId])
}
